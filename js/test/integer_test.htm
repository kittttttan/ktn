<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Test integer.js</title>
<link rel="stylesheet" href="http://code.jquery.com/qunit/qunit-git.css">
<script src="http://code.jquery.com/qunit/qunit-git.js"></script>
<script src="../lib/integer.js"></script>
</head>
<body>
<h1 id="qunit-header">Test long.js</h1>
<h2 id="qunit-banner"></h2>
<div id="qunit-testrunner-toolbar"></div>
<h2 id="qunit-userAgent"></h2>
<ol id="qunit-tests"></ol>
<div id="qunit-fixture">test markup</div>
<script>
module("Integer");

test("init", function() {
  equal(Integer.zero().toString(), Integer.str("0").toString(), "0");
  equal(Integer.num(0).toString(), Integer.str("0").toString(), "0");
  equal(Integer.str("0").eq(Integer.zero()), true, "0 == 0");
  
  equal(Integer.num(1).toString(), Integer.str("1").toString(), "1");
  equal(Integer.one().toString(), Integer.str("1").toString(), "1");

  equal(Integer.num(123456789).toString(), Integer.str("123456789").toString(), "123456789");
  equal(Integer.num(2147483647).toString(), Integer.str("2147483647").toString(), "2147483647");
  equal(Integer.num(1234567890).toString(), Integer.str("1234567890").toString(), "1234567890");
  equal(Integer.any(12345678900).toString(), Integer.str("12345678900").toString(), "12345678900");
  equal(Integer.num(0x7fffffff).toString(), Integer.str("7fffffff", 16).toString(), "0x7fffffff = 2147483647");
  equal(Integer.any(-0x7fffffff).toString(), Integer.str("-7fffffff", 16).toString(), "-0x7fffffff = -2147483647");

  equal(Integer.str("1234567", 8).toString(), Integer.num(342391).toString(), "01234567 = 342391");
  equal(Integer.str("ffffffff", 16).toString(), "4294967295", "0xffffffff = 4294967295");
});

test("basic", function() {
  var a = Integer.str("1234567890");
  var b = Integer.num(10).pow(7);

  equal(a.toString(), "1234567890", "1234567890");
  equal(a.clone().toString(), "1234567890", "1234567890");
  equal(a.neg().toString(), "-1234567890", "-1234567890");

  equal(b.toString(), "10000000", "10000000");

  equal(a.add(b).toString(), "1244567890", "1234567890 + 10000000 = 1244567890");
  equal(a.sub(b).toString(), "1224567890", "1234567890 - 10000000 = 1224567890");
  equal(a.mul(b).toString(), "12345678900000000", "1234567890 x 10000000 = 12345678900000000");
  equal(a.div(b).toString(), "123", "1234567890 / 10000000 = 123");
  equal(a.mod(b).toString(), "4567890", "1234567890 % 10000000 = 4567890");
  equal(a.square().toString(), "1524157875019052100", "1234567890 ^ 2 = 1524157875019052100");
  
  equal(a.sqrt().toString(), "35136", "1234567890 ^ 0.5 = 35136");
  equal(a.gcd(b).toString(), "10", "gcd(1234567890, 10000000) = 10");
});

test("add", function() {
  var a = Integer.num(1e7);
  
  equal(a.add(Integer.zero()).toString(), "10000000", "10000000 + 0 = 10000000");
  equal(a.add(Integer.one()).toString(), "10000001", "10000000 + 1 = 10000001");
  equal(a.add(a).toString(), "20000000", "10000000 + 10000000 = 20000000");
});

test("sub", function() {
  var a = Integer.num(1e7);
  
  equal(a.sub(Integer.zero()).toString(), "10000000", "10000000 - 0 = 10000000");
  equal(a.sub(Integer.one()).toString(), "9999999", "10000000 - 1 = 9999999");
  equal(a.sub(a).toString(), "0", "10000000 - 10000000 = 0"); 
  equal(Integer.one().sub(a).toString(), "-9999999", "1 - 10000000 = -9999999");
  equal(Integer.zero().sub(a).toString(), "-10000000", "0 - 10000000 = -10000000");
});

test("mul", function() {
  var a = Integer.num(1e7);
  
  equal(a.mul(Integer.zero()).toString(), "0", "10000000 * 0 = 0");
  equal(a.mul(Integer.one()).toString(), "10000000", "10000000 * 1 = 10000000");
  equal(a.mul(a).toString(), "100000000000000", "10000000 * 10000000 = 100000000000000"); 
  equal(Integer.one().neg().mul(a).toString(), "-10000000", "-1 * 10000000 = -10000000");
});

test("div", function() {
  var a = Integer.num(1e7);
  
  throws(function(){ a.div(Integer.zero()); }, Error, "zero division");
  equal(a.div(Integer.one()).toString(), "10000000", "10000000 / 1 = 10000000");
  equal(a.div(a).toString(), "1", "10000000 / 10000000 = 1"); 
  equal(Integer.one().neg().div(a).toString(), "0", "-1 / 10000000 = 0");
});

test("mod", function() {
  var a = Integer.num(1e7);
  
  throws(function(){ a.mod(Integer.zero()); }, Error, "zero division");
  equal(a.mod(Integer.one()).toString(), "0", "10000000 % 1 = 0");
  equal(a.mod(a).toString(), "0", "10000000 % 10000000 = 0"); 
  equal(Integer.one().neg().mod(a).toString(), "-1", "-1 % 10000000 = -1");
});

test("shift", function() {
  var one = Integer.one();
  var two = Integer.num(2);
  var ls7 = one.leftShift(7);
  var ls17 = one.leftShift(17);
  var ls27 = one.leftShift(27);
  var ls37 = one.leftShift(37);
  var ls47 = one.leftShift(47);

  equal(ls7.toString(), "128", "1 << 7 = 128");
  equal(ls17.toString(), "131072", "1 << 17 = 131072");
  equal(ls27.toString(), "134217728", "1 << 27 = 134217728");
  equal(ls37.toString(), "137438953472", "1 << 37 = 137438953472");
  equal(ls47.toString(), "140737488355328", "1 << 47 = 140737488355328");

  equal(two.pow(7).toString(), "128", "2 ^ 7 = 128");
  equal(two.pow(17).toString(), "131072", "2 ^ 17 = 131072");
  equal(two.pow(27).toString(), "134217728", "2 ^ 27 = 134217728");
  equal(two.pow(37).toString(), "137438953472", "2 ^ 37 = 137438953472");
  equal(two.pow(47).toString(), "140737488355328", "2 ^ 47 = 140737488355328");

  equal(ls7.rightShift(7).toString(), "1", "128 >> 7 = 1");
  equal(ls17.rightShift(17).toString(), "1", "131072 >> 17 = 1");
  equal(ls27.rightShift(27).toString(), "1", "134217728 >> 27 = 1");
  equal(ls37.rightShift(37).toString(), "1", "137438953472 >> 37 = 1");
  equal(ls47.rightShift(47).toString(), "1", "140737488355328 >> 47 = 1");
});

test("factorial", function () {
  equal(Integer.factorial(0).toString(), "1", "0! = 1");
  equal(Integer.factorial(1).toString(), "1", "1! = 1");
  equal(Integer.factorial(2).toString(), "2", "2! = 2");
  equal(Integer.factorial(3).toString(), "6", "3! = 6");
  equal(Integer.factorial(10).toString(), "3628800", "10! = 3628800");
  equal(Integer.factorial(17).toString(), "355687428096000", "17! = 355687428096000");
});

function fib(a) {
  var b = Integer.zero();
  for (var i = 0, c = Integer.one(), d; i < a; ++i) {
    d = b.clone();
    b = b.add(c);
    c = d;
  }
  return b;
}

test("fib", function(){
  equal(fib(0).toString(), "0", "fib(0) = 0");
  equal(fib(1).toString(), "1", "fib(1) = 1");
  equal(fib(2).toString(), "1", "fib(2) = 1");
  equal(fib(3).toString(), "2", "fib(3) = 2");
  equal(fib(4).toString(), "3", "fib(4) = 3");
  equal(fib(38).toString(), "39088169", "fib(38) = 39088169");
});

function pi(a) {
  if (!a) { a = 1; }
  var n = Integer.num(10).pow(a);

  function arccot(m) {
    var c = n, a = c.div(m), b = a.clone(), m2 = m.square(),
        k = Integer.num(1), s = true, l2 = Integer.num(2);
    while (c.isNonZero()) {
      b = b.div(m2);
      k = k.add(l2);
      c = b.div(k);
      s = !s;
      if (s) {
        a = a.add(c);
      } else {
        a = a.sub(c);
      }
    }
    return a;
  }

  var a5 = arccot(Integer.num(5));
  var a239 = arccot(Integer.num(239));
  return a5.leftShift(2).sub(a239).leftShift(2);
}

test("pi", function(){
  var p = "314159265358979323846264338327950288419716939937510582097494459230781640628620948";
  equal(pi(80).toString(), p, p);
});

</script>
</body>
</html>